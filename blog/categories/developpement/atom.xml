<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Developpement | Bob Maerten, le Blog]]></title>
  <link href="http://bobmaerten.github.com/blog/categories/developpement/atom.xml" rel="self"/>
  <link href="http://bobmaerten.github.com/"/>
  <updated>2012-08-30T13:17:13+02:00</updated>
  <id>http://bobmaerten.github.com/</id>
  <author>
    <name><![CDATA[Bob Maerten]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Virtualbox + Vagrant = le duo gagnant pour les tests]]></title>
    <link href="http://bobmaerten.github.com/virtualbox-et-vagrant-le-duo-gagnant-pour-les-tests"/>
    <updated>2012-07-16T08:48:00+02:00</updated>
    <id>http://bobmaerten.github.com/virtualbox-et-vagrant-le-duo-gagnant-pour-les-tests</id>
    <content type="html"><![CDATA[<p>Lorsqu'il s'agit de tester une application ou une configuration, vient toujours le moment ou on se demande si cela vraiment fonctionner « en vrai », dans la mesure ou bien souvent, on effectue qu'une partie des tests en question afin de ne pas casser complètement son environnement de tests et donc d'avoir à le reconstruire à chaque fois.</p>

<p>Et si on avait le luxe de pouvoir casser cet environnement de test aussi souvent qu'on le voulait, sans se soucier d'avoir à péniblement le reconstruire ? La donne serait-elle différente et nos tests plus fréquents ou plus complets ?</p>

<p>C'est que ce je vous propose de regarder avec Virtualbox+Vagrant.</p>

<!--more-->


<h2>Introduction</h2>

<p><img class="left" src="http://www.prodigyproductionsllc.com/wp-content/uploads/2011/05/virtualbox_logo.png">
<a href="http://virtualbox.org">Virtualbox</a> est une solution de virtualisation de machine. Disponible sur la plupart des plate-formes du marché, il permet d'installer et de faire tourner différents systèmes en émulant le fonctionnement des périphériques (CPU, Mémoire, Disques, USB, etc.). L'intérêt dans notre cas, est que le disque du système dit « invité » est géré physiquement par un fichier sur le système « hôte », ce qui permet de le manipuler à loisir pour copier une machine virtuellement, la sauvegarder, la distribuer, ou s'en servir de référence.</p>

<p><img class="right" src="http://vagrantup.com/static/images/hippie.png">
Toutes les manipulations que l'on peut faire via l'interface utilisateur de Virtualbox étant disponible sous forme « d'API », il devient possible de scripter un certain nombre d'actions. C'est là que <a href="http://vagrantup.com">Vagrant</a> entre en scène. C'est un logiciel développé en ruby, distribué <a href="http://rubygems.org">sous forme de gem</a> pour les systèmes *nix, et <a href="http://vagrantup.com">sous forme de package</a> sous Windows, qui permet la manipulation d'image systèmes crées pour Virtualbox : création à partir d'une référence, démarrage, configuration, provisionnement, arrêt et suppression.</p>

<p><img class="left" src="http://www.noxlogic.nl/wp-content/uploads/2012/04/Puppet_Logo.png"> <img class="right" src="http://wiki.opscode.com/download/attachments/688131/OC_Chef_Logo_small.png">
Arrêtons-nous un moment sur une des fonctions citées : <em>provisionnement</em>. C'est là la vraie raison de l'utilisation du couple Virtualbox+Vagrant. En effet, Vagrant permet de préciser un état de configuration à la machine lancée, grâce à des outils comme <a href="ihttp://wiki.opscode.com/display/chef/Home">Chef</a> ou <a href="http://puppetlabs.com">Puppet</a>, de telle sorte qu'au lieu de préparer un environnement « à la main », il convient de prendre un peu plus de temps à le préparer de manière automatisée et de pouvoir réinitialiser la machine virtuelle pour retrouver un environnement nominal. Je ne vais pas trop insister sur les techniques liées aux deux outils de provisionnement proposé par Vagrant, mais si cette partie vous intéresse j'en reparlerai plus en détails dans un prochain billet.</p>

<h2>Installation des outils</h2>

<p>L'installation de Virtualbox est triviale. Sur les systèmes Debian, elle consiste à installer le paquet virtualbox-ose et sous Windows/Apple à télécharger l'installeur pour lequel il conviendra de cliquer autant de fois que nécessaire sur le bouton "suivant". :-)
<code>bash installation de Virtualbox
sudo aptitude install virtualbox-ose
</code></p>

<p>L'installation de Vagrant l'est tout autant pour peu que vous ayez un environnement ruby fonctionnel sur votre système *nix. À défaut d'un billet de mise à jour sur mon installation ruby courante, reportez-vous à <a href="/environnement-de-developpment-rails-sous-ubuntu-11-dot-10">ce précédent billet</a>. Sous Windows, Vagrant est proposé sous forme d'installateur, si bien que l'environnement ruby est installé en même temps.
<code>bash installation de Vagrant
gem install vagrant --no-ri --no-rdoc
</code></p>

<h2>Préparation/récupération d'une VM de base</h2>

<p>Le site de Vagrant propose un certain de nombre de <a href="https://github.com/mitchellh/vagrant/wiki/Available-Vagrant-Boxes">machines virtuelles pré-configurées</a> (dernières version de Ubuntu en 32 et 64 bits), mais également une liste de <a href="http://www.vagrantbox.es/">machines mises à dispositions par la communauté</a>.
Il est bien évidemment possible de créer ses propres « baseboxes » en suivant <a href="http://vagrantup.com/v1/docs/base_boxes.html">les préconisations</a> du site ou en utilisant une gem bien utile appelée <a href="http://rubygems.org/gems/veewee">veewee</a>.</p>

<p>Afin d'éviter de télécharger à chaque nouvelle utilisation, Vagrant peut stocker dans votre homedir (~/vagrant.d) les <em>basebox</em> que vous manipulerez fréquemment:
<code>bash Téléchargement et enregistrement local d'une nouvelle basebox
vagrant box add precise64 http://files.vagrantup.com/precise64.box
</code></p>

<h2>Mise en oeuvre</h2>

<p>Prenons l'exemple d'un test sur une application web. L'idée étant de ne pas avoir à installer de serveur web, ni toute la couche applicative et ses dépendances sur son environnement de travail habituel (pour ne pas le « pourrir ») d'une part, et éventuellement d'autre part de tester le fonctionnement de l'application dans un environnement le plus proche possible de celui dans lequel il sera ammené à fonctionner lors de sa mise en production.</p>

<p>Mettons que l'on souhaite tester <a href="http://owncloud.org">ownCloud</a>, la page <a href="http://owncloud.org/support/install/">listant les pré-requis</a> va nous servir de base pour préparer notre configuration. Créons un dossier dans lequel nous déposerons l'archive du logiciel.
<code>bash
mkdir /tmp/owncloud_test &amp;&amp; cd /tmp/owncloud_test
wget http://download.owncloud.org/releases/owncloud-4.0.4.tar.bz2
</code></p>

<p>Pour pouvoir fonctionner, Vagrant s'attend à trouver un fichier de configuration dans lequel il va nous être possible de définir en plus les quelques directives permettant de paramétrer notre environnement cible.
<code>bash création d'un fichier de configuration
vagrant init precise64
</code>
Une fois le ficher Vagrantfile de base créé, renseignons le un peu plus afin de configurer notre VM comme on le souhaite
```ruby Vagranfile
Vagrant::Config.run do |config|</p>

<p>  # Basebox utilisée pour construire la VM
  config.vm.box = "precise64"</p>

<p>  # Forward du port 8080 du système hôte vers le port 80 de la VM
  # afin de permettre l'accès au serveur web de le VM depuis le système
  config.vm.forward_port 80, 8080</p>

<p>  # Utilisation de puppet (standalone)
  # normalement installé par défaut sur les basebox)
  config.vm.provision :puppet do |puppet|</p>

<pre><code>puppet.manifests_path = "."
puppet.manifest_file  = "owncloud.pp"
</code></pre>

<p>  end</p>

<p>  # execution de commandes spécifiques qui ne peuvent être prises en charge par Puppet
  config.vm.provision :shell, :inline => 'sudo rm -rf /var/www/* &amp;&amp;</p>

<pre><code>                                      cd /tmp &amp;&amp;
                                      tar -xjf /vagrant/owncloud-4.0.4.tar.bz2 &amp;&amp;
                                      sudo mv /tmp/owncloud/* /var/www/ &amp;&amp;
                                      chown -R www-data\: /var/www &amp;&amp;
                                      sudo apache2 restart'
</code></pre>

<p>end
```</p>

<p><code>ruby owncloud.pp : Le fichier de provisionnement Puppet
$owncloud_reqs = [
  "libapache2-mod-php5",
  "php5-json",
  "php5-gd",
  "php5-sqlite",
  "curl",
  "libcurl3",
  "libcurl3-dev",
  "php5-curl",
]
package { $owncloud_reqs:
  ensure =&gt; installed,
}
</code></p>

<p>```bash Démarrage de la VM
$ vagrant up
[default] Importing base box 'precise64'...
[default] Matching MAC address for NAT networking...
[default] Clearing any previously set forwarded ports...
[default] Forwarding ports...
[default] -- 22 => 2222 (adapter 1)
[default] -- 80 => 8080 (adapter 1)
[default] Creating shared folders metadata...
[default] Clearing any previously set network interfaces...
[default] Booting VM...
[default] Waiting for VM to boot. This can take a few minutes.
[default] VM booted and ready for use!
[default] Mounting shared folders...
[default] -- v-root: /vagrant
[default] -- manifests: /tmp/vagrant-puppet/manifests
[default] Running provisioner: Vagrant::Provisioners::Puppet...
[default] Running Puppet with /tmp/vagrant-puppet/manifests/owncloud.pp...
notice: /Stage[main]//Package[php5-sqlite]/ensure: ensure changed 'purged' to 'present'</p>

<p>notice: /Stage[main]//Package[php5-curl]/ensure: ensure changed 'purged' to 'present'
notice: /Stage[main]//Package[php5-json]/ensure: ensure changed 'purged' to 'present'
notice: /Stage[main]//Package[php5-gd]/ensure: ensure changed 'purged' to 'present'</p>

<p>notice: /Stage[main]//Package[libcurl3-dev]/ensure: ensure changed 'purged' to 'present'
[default] Running provisioner: Vagrant::Provisioners::Shell...
```</p>

<p>Une fois la main rendue (c'est potentiellement <em>très</em> long, Puppet n'étant pas véloce en plus du volume dess paquets à télécharger), il suffit de se connecter à http://localhost:8080 sur votre propre machine et constater le résultat.
<img src="/images/vagrant/localhost_owncloud.png" alt="Résultat d'installation" /></p>

<p>Et voilà, une installation « jetable » de owncloud me permettant de tester l'installation, d'avancer dans la configuration, et de revenir à zéro en réinialisant complètement la machine virtuelle.</p>

<h2>Autres commandes</h2>

<p>La commande 'vagrant' permet également de stopper ou suspendre (au sens Virtualbox du terme), de redémarrer, et détruire la VM. Sous *nix, la commande 'vagrant ssh' comme elle l'indique permet de se connecter via SSH sur la machine virtuelle, comme on se connecterait à un serveur distant. La connexion s'effectue sans mot de passe, grâce à une clé semi-privé dans le sens ou c'est une clé utilisée par défaut dans toutes les installations de vagrant (il est préconisé de l'utiliser à la création d'une nouvelle basebox si elle a vocation à être distribuée).</p>

<p>Windows étant dépourvu de client SSH natif, la commande renvoie une erreur en précisant qu'il est possible d'utiliser un client externe tel que <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">PuTTY</a> en convertissant la clé partagée au bon format.</p>

<p>La commande 'vagrant provision' relance le processus de provisionnement.</p>

<h2>Conclusion</h2>

<p>Vagrant est un outil très intéressant pour manipuler facilement différents environnements. Que ce soit pour effectuer des tests, valider un environnement, isoler des services/applications ou tester des directives Puppet/Chef en vue d'un déploiement réel.</p>

<p>L'inconvénient est évidemment que, comme tout ce qui est virtualisé, c'est fortement consommateur de ressources et en l'occurence, pas très véloce sauf à avoir une très bonne machine. Le provisionnement à répétition peut être aussi un gouffre à temps perdu lorsque des paquets doivent être installés (ils sont re-téléchargés à chaque fois). Il peut-être intéressant dans cette situation d'avoir recours à un proxy-cache. Cela fera peut-être l'objet d'un prochain billet...</p>

<h3>Lectures complémentaires</h3>

<p>L'éventail des possibilités est bien évidemment plus large que le petit cas particulier étudié ici.</p>

<ul>
<li><p>Je ne peux que vous conseiller la lecture de <a href="http://vagrantup.com/v1/docs/index.html">la partie doc site de vagrant</a> afin d'en apprendre davantage. N'hésitez pas à partager vos éventuels usages de Vagrant, c'est toujours intéressant de connaitres différents usages.</p></li>
<li><p>Présentation de <a href="http://twitter.com/jmfontaine">@jmfontaine</a> au RMLL 2012 sur la <a href="http://www.slideshare.net/JMF/grer-ses-environnements-de-dveloppement-avec-vagrant-rmll-2012">gestion des environnements de développement avec vagrant</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un peu d'animation avec jQuery]]></title>
    <link href="http://bobmaerten.github.com/un-peu-danimation-avec-jquery"/>
    <updated>2011-11-13T22:41:00+01:00</updated>
    <id>http://bobmaerten.github.com/un-peu-danimation-avec-jquery</id>
    <content type="html"><![CDATA[<p>Dans le cadre d'un projet en cours, je souhaitais placer une image assez grande sur une page d'information, mais je trouvais que cela mettait en vrac la mise en page. Aussi, je me suis demandé ce que cela pourrait donner si cette image s'affichait de manière réduite mais agrémentée d'un défilement vertical.</p>

<!--more-->


<p>L'affichage se présente donc de la sorte : une image englobée dans un calque qui est plus petit, et donc tronquée. L'idée est de faire défiler verticalement l'image pour la dévoiler au fur et à mesure :</p>

<p><img src="https://lh5.googleusercontent.com/-Z6Vkpu1xtdw/TsA9sQUDMxI/AAAAAAAAA-Y/ysQhdLEZfWA/s986/1321221551960.png" alt="Mon super Site" /></p>

<p>Voici le code correspondant.
<div><script src='https://gist.github.com/1362818.js?file=page.html'></script>
<noscript><pre><code>&lt;div class=&quot;affiche&quot;&gt;
  &lt;img id=&quot;pic&quot; src=&quot;http://placehold.it/940x560&quot; /&gt;
  &lt;div class=&quot;container&quot;&gt;
    &lt;h1&gt;Mon Super Site&lt;/h1&gt;
    &lt;p&gt;ou on y cause de tout et de rien...&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre></noscript></div>

Notez l'utilisation de <code>overflow:hidden</code> afin d'empêcher que le <code>div</code> ne prenne la taille de l'image.
<div><script src='https://gist.github.com/1362818.js?file=page.css'></script>
<noscript><pre><code>.affiche {
  position: relative;
  height: 260px;
  overflow:hidden;
  padding: 0;
}

.affiche img {
    margin: 0;
    padding: 0;
    position: relative;
  }
</code></pre></noscript></div>

Et là, jQuery est ton ami comme dirait l'autre. L'astuce consite à jouer sur la propriété <code>top</code> de l'image et de demander à jQuery d'incrémenter grâcieusement à l'aide de la fonction <a href="http://api.jquery.com/animate/">animate</a>.
<div><script src='https://gist.github.com/1362818.js?file=page.js'></script>
<noscript><pre><code>$(document).ready(function() {
    function up() {
        $(&quot;#plop&quot;).animate({&quot;top&quot;: &quot;-=200px&quot;}, 1000, &quot;linear&quot;, down);
    }
    
    function down() {    
        $(&quot;#plop&quot;).animate({&quot;top&quot;: &quot;+=200px&quot;},1000, &quot;linear&quot;, up);
    }

    up();
});</code></pre></noscript></div>

L'avantage de cette fonction, c'est qu'elle accepte comme dernier paramètre le nom d'une fonction a exécuter une fois l'animation complétée. Ainsi, on peut effectuer une animation dans un sens (up), puis la chainer à une animation dans le sens inverse (down), et boucler. ;-)</p>

<p>Vous pouvez aller <a href="http://jsfiddle.net/KgWK4/45/">tester/modifier ce code</a> sur jsFiddle, qui m'a bien aidé pour tripatouiller cette idée.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Environnement de développement rails sous Ubuntu 11.10]]></title>
    <link href="http://bobmaerten.github.com/environnement-de-developpment-rails-sous-ubuntu-11-dot-10"/>
    <updated>2011-11-08T22:09:00+01:00</updated>
    <id>http://bobmaerten.github.com/environnement-de-developpment-rails-sous-ubuntu-11-dot-10</id>
    <content type="html"><![CDATA[<p>Alors que nombre de tutoriels, vidéos, [pod|screen]casts traitent de la meilleure façon de configurer son environnement <em>MacOSX</em> pour le développement ruby/rails, les articles concernant ce qu'il en est des autres systèmes sont plutôt rares (et d'autant plus en français), aussi je vous propose ici ma façon de procéder sur Ubuntu 11.10 que je viens tout juste de finir d'installer et de paramétrer sur <a href="http://www.dell.com/fr/entreprise/p/vostro-3450/pd">mon portable</a>.</p>

<!--more-->


<h2>Méthode générale</h2>

<p>Comme il s'agit d'installer une configuration de développement, le principe réside en l'installation de ruby par l'intermédiaire de <a href="http://rvm.beginrescueend.com">RVM</a>. L'avantage est de pouvoir disposer des fonctionnalités offertes par RVM telles que le choix de la version de ruby en fonction du projet, et accessoirement la possibilité de gérer des <em>gemsets</em>.</p>

<h2>Pré-requis système</h2>

<p>Les paquets suivants doivent être installés afin de pouvoir compléter l'installation.
<code>bash
sudo apt-get install build-essential openssl libreadline6 libreadline6-dev \
zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 \
libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison \
git curl libssl0.9.8 libpq-dev
</code></p>

<h2>La commande magique ;-)</h2>

<p>RVM s'installe à l'aide de cette commande
<code>bash
bash &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer )
</code>
Cette commande récupère le script d'installation directement sur le site de RVM et l'exécute en local. Ensuite, comme l'indiquent les consignes affichées à la fin de l'exécution du script, il convient d'ajouter la commande suivante dans votre fichier <code>.bashrc</code> (ou .zshrc).
<code>bash
[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell
</code>
Il convient enfin de recharger votre environnement (en fermant votre terminal, ou en effectuant un <code>source .bashrc</code> (ou source .zshrc)</p>

<h2>Installation de Ruby</h2>

<p>Maintenant nous disposons de la commande rvm, nous pouvons nous attaquer à Ruby sereinement, car RVM va nous faciliter grandement la tâche. Pour installer la dernière version en date, il suffit de taper :
<code>bash
rvm install 1.9.3
</code>
S'en suit une longue phase de récupération des sources, de paramétrage et de compilation, qui au final nous amène à terminer la configuration par :
<code>bash
rvm use 1.9.3 # ajouter --default pour en faire la version chargée par défaut au lancement du terminal
</code></p>

<h2>Toute la puissance de ruby et de rubygems à votre portée</h2>

<p>Et voila, c'est tout. Vous pouvez désormais utiliser la commande <code>gem install</code> pour installer les librairies nécessaires à vos projets.
<code>bash
gem install bundler rails
rails new my_new_app
cd my_new_app
rails s
</code>
<strong>Note</strong> : cette dernière commande va échouer sur la derniere version de rails (3.1.x) car il y a une dépendance sur un moteur d'exécution Javascript. Deux solutions :
<code>bash ajouter therubyracer au fichier Gemfile
echo "gem 'therubyracer'" &gt;&gt; Gemfile
bundle
rails s
</code>
ou alors, si jamais vous vous intéressez également un peu à Javascript coté serveur, vous pouvez installer le paquet <code>nodejs</code>.
<code>bash Installer Node.js sur le système, rails s'en servira au lieu de therubyracer
sudo apt-get install nodejs
rails s
</code></p>

<h2>Conclusion</h2>

<p>Comme vous pouvez le constater sur le nombre de commandes à exécuter, l'installation et la configuration d'un environnement de développement rails sous Ubuntu n'est pas très compliqué. Et même si vous développez sous <em>MacOSX</em>, il peut être intéressant de connaître la démarche pour peu que vous soyez amené à déployer votre code sur un système Linux, ou si vous souhaitez tester votre application sur un serveur virtualisé (avec la gem <code>vagrant</code> par exemple).</p>

<h4>Ressources complémentaires</h4>

<ul>
<li><a href="https://github.com/joshfng/railsready">RailsReady</a> : un script encore plus automatisé qui fonctionne sur MacOS, Ubuntu et CentOS permettant d'effectuer toutes les manipulations effectuées ci-dessus en une ligne.</li>
<li><a href="https://github.com/sstephenson/rbenv">rbenv</a> est une nouvelle implémentation des fonctionnalités de RVM, avec un postulat légèrement différenti (notamment sur la façon de gérer l'environnement). Je l'évoque ici, mais ne l'ayant pas exploré vraiment, je ne me permettrais pas de porter un jugement.</li>
<li><a href="http://doc.ubuntu-fr.org/rubyonrails">La documentation Ubuntu officielle</a> en français, mais elle préconise une installation de RVM au niveau du système, ce qui oblige à préfixer chaque action d'installation de gem par <code>sudo</code>.</li>
</ul>


<h1>Mises à jour de cet article</h1>

<p>2011-11-12 : Ajout d'un prérequis (libpq-dev) requis par l'hébergement heroku
2011-11-09 : Ajout d'un prérequis (libssl) pour permettre à certaines application rails 3.0.x de se lancer</p>
]]></content>
  </entry>
  
</feed>
