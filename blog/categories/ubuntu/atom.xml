<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ubuntu | Bob Maerten, le Blog]]></title>
  <link href="http://bobmaerten.github.com/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://bobmaerten.github.com/"/>
  <updated>2012-09-24T11:25:13+02:00</updated>
  <id>http://bobmaerten.github.com/</id>
  <author>
    <name><![CDATA[Bob Maerten]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tmux+Vim Mega Combo]]></title>
    <link href="http://bobmaerten.github.com/tmux-plus-vim-mega-combo"/>
    <updated>2012-08-30T13:15:00+02:00</updated>
    <id>http://bobmaerten.github.com/tmux-plus-vim-mega-combo</id>
    <content type="html"><![CDATA[<p>Je vous propose pour ce billet de rentrée, un petit retour sur la récente refonte de mon environnement de développement sous Ubuntu.</p>

<p>Pour situer, j'utilise quasi-exclusivement <a href="http://www.vim.org">vim</a> car c'est un usage qui me convient cérébralement. Pour mémoire, vim est un éditeur de texte qui permet (entre autre) la distinction du mode insertion et du mode commande, et rien que ça, une fois mappé ça mentalement c'est une tuerie.</p>

<p>D'autre part, je me sers depuis peu et de plus en plus volontiers de <a href="http://tmux.sourceforge.net/">tmux</a>, un <em>terminal multiplexer</em> qui offre la possibilité de travailler en sessions (détachables et réattachables à souhait), et d'organiser son terminal en fenêtres et panels. C'est une alternative à l'outil GNU standard <em>screen</em> que j'utilise plus volontairement lorsque je dois exécuter des commandes longues sur mes serveurs, car il y est installé par défaut. Bien que les deux outils se valent, je préfère tout de même le <em>feeling</em> de tmux.</p>

<p>L'objectif n'est pas de faire l'apologie des outils que j'utilise, mais de présenter l'usage que j'en ai et de partager les trucs, astuces et écueils techniques.</p>

<!--more-->


<h2>Objectif</h2>

<p>Dans cette refonte entamée, je souhaitais pouvoir disposer d'un environnement « transportable » ou tout du moins réplicable facilement, voire automatiquement sur mes différents postes (boulot, maison, portable). L'idée de travailler au maximum dans un shell *nix s'est rapidement imposée. La plupart des outils se configurant à l'aide de fichier de configuration texte, l'usage d'un dépot git ou d'un outil de synchronisation de fichiers comme <a href="http://one.ubuntu.com">UbuntuOne</a> ou <a href="http://dropbox.com">DropBox</a> permettrait d'obtenir le résultat escompté.</p>

<p>J'ai donc décidé de placer l'ensemble de mes fichiers de configuration (dotfiles) dans mon Dropbox, et d'avoir un petit script pour placer des liens symboliques en lieu et place des fichiers de base. Ainsi la synchronisation s'effectue (de manière transparente ou à la demande selon la configuration de Dropbox mise en place) sur mes différents postes.
```bash Création des liens symboliques à la racine du compte depuis le dossier Dropbox</p>

<h1>!/bin/bash</h1>

<p>cd ~
ln -s Dropbox/dotfiles/tmux/tmux.conf .tmux.conf
ln -s Dropbox/dotfiles/zsh/zshrc .zshrc
ln -s Dropbox/dotfiles/git/gitconfig .gitconfig
ln -s Dropbox/dotfiles/vim .vim
ln -s Dropbox/dotfiles/vim/vimrc .vimrc
ln -s Dropbox/dotfiles/ruby/gemrc .gemrc
ln -s Dropbox/dotfiles/ruby/railsrc .railsrc
ln -s Dropbox/dotfiles/fonts/ .fonts
/usr/bin/fc-cache -vf
```</p>

<h2>Mon usage de tmux</h2>

<p>Tmux me permet essentiellement de partager ma fenêtre de terminal en plusieurs onglet ou panels, et de gérér/surveiller/lancer plusieurs activités simultanées. Vous pouvez voir sur l'image ci-dessous une session tmux organisée en 3 panels : mon éditeur vim en haut en cours d'édition de ce billet, et deux autres en bas qui font tourner deux programmes, un serveur Webrick pour prévisualiser le billet, et un système de rechargement automatique de page web (guard-livereload).
<img src="/images/sessiontmux.png" alt="Session Tmux" />
Tmux permet également de travailler avec des onglets (appelés fenêtres dans le contexte). Des commandes clavier permettent bien entendu de passer d'une fenêtre ou d'un panel à un autre, de changer la disposition, de réorganiser, et même de scripter tout cela (exemple plus loin dans le billet). Je ne vais pas détailler tout cela ici, il faudrait plusieurs articles voire un site complet, par contre si la configuration de tmux vous intéresse, je ne saurais trop vous conseiller <a href="http://pragprog.com/book/bhtmux/tmux">l'excellent bouquin sur tmux</a> de <a href="http:/twitter.com/bphogan">Brian P. Hogan</a> disponible chez <a href="http://pragprog.com">The Pragmatic Bookshelf</a> (une excellente source sur le développement logiciel au passage) qui fait le tour de l'outil pour pas bien cher.</p>

<p>Vous pourrez bien entendu trouver pas mal de documentation sur le net, comme toujours pour ce genre d'outil bien répandu dans la communauté.</p>

<h2>Trop de mapping tue le mapping</h2>

<p>Un des gros problèmes auquel j'ai été confronté fut de résoudre le croisement des différents raccourcis et de l'utilisation de certaines touches dans vim, à la fois sous tmux et en dehors tmux. En effet, tmux et vim ne s'entendent pas toujours sur certaines combinaisons. Des raccourcis qui fonctionnaient dans vim ne s'activent plus du tout une fois ouvert sous tmux. Ajoutez à cela les raccourcis du terminal lui même et c'est devenu un vrai casse-tête quand j'ai voulu configurer des raccourcis pour retailler les panels, tout en gérant les <em>splits</em> de vim...</p>

<p><a href="http://stackoverflow.com/search?q=vim+tmux">Stackoverflow</a> a été d'une grande aide pour résoudre tout ces petits problèmes, bien sur jamais bloquants, mais quand même bien frustrants. Sachez si vous rencontrez le problème que l'option tmux "set-window-option -g xterm-keys on" est d'un grand secours ! ;)</p>

<p>Si jamais, comme moi, vous vous servez des flêches de direction dans vim, voici les quelques lignes que j'ai du ajouter dans mon .vimrc afin que je puisse m'en servir sous tmux. Alors oui, je sais, il parait que les flèches dans vim c'est le mal ! <a href="http://jeetworks.org/node/89">Mais tout dépend de ce qu'on en fait</a> :P
```vim
" Fix usage of arrows in tmux
" http://superuser.com/questions/401926/how-to-get-shiftarrows-and-ctrlarrows-working-in-vim-in-tmux
if &amp;term =~ '<sup>screen'</sup></p>

<pre><code>" tmux will send xterm-style keys when its xterm-keys option is on
execute "set &lt;xUp&gt;=\e[1;*A"
execute "set &lt;xDown&gt;=\e[1;*B"
execute "set &lt;xRight&gt;=\e[1;*C"
execute "set &lt;xLeft&gt;=\e[1;*D"
</code></pre>

<p>endif
```</p>

<h2><em>One command to rule them all</em></h2>

<p>Dernièrement je me suis fait un petit script tmux qui me permet de réorganiser ma fenêtre courante afin d'avoir une petite zone de shell (agrandissable dans une autre fenetre, voir plus bas),
```bash Formattage de la fenetre courante pour de développement Rails</p>

<h1>select the first (0) pane</h1>

<p>selectp -t 0</p>

<h1>split it into two halves and open vim in the second one</h1>

<p>splitw -h -p 66 'vim ; zsh'</p>

<h1>reselect the first pane again and split it verticaly</h1>

<p>selectp -t 1
splitw -v -p 80 'guard'
splitw -v -p 20 'rails server'</p>

<h1>reselect first pane</h1>

<p>selectp -t 1
<code>
J'ai ensuite ajouté un nouveau bind dans mon .tmux.conf
</code>bash Extrait de .tmux.conf</p>

<h1>Rails dev-panes</h1>

<p>bind-key R source-file ~/Dropbox/dotfiles/tmux/rails-dev-panes
```
Ainsi, à la racine d'un projet rails, il me suffit de presser <Prefix>R pour me obtenir ceci. Pratique, hein ?
<img src="/images/sessionrails.png" alt="Session Rails" /></p>

<h2><em>There and back again</em></h2>

<p>En bonus, voici deux directives de configuration tmux permettant d'agrandir un panel dans une fenêtre et inversement (avec <Prefix>+ et <Prefix>-).
Cette configuiration me permet de passer temporairement d'un panel réduit (telle une zone de logs) à une fenêtre de la taille de mon terminal.
```bash Zoom et DeZomm d'un panel tmux
unbind +
bind + \
  new-window -d -n tmux-zoom \;\
  swap-pane -s tmux-zoom \;\
  select-window -t tmux-zoom</p>

<p>unbind -
bind - \
  last-window \;\
  swap-pane -s tmux-zoom \;\
  kill-window -t tmux-zoom
```</p>

<h2>Pour finir</h2>

<p>Voila, comme pour tous les billets ou je pars dans l'idée de faire court, simple et rapide, je me plante complètement alors je préfère arrêter là. Chacun son usage des outils avec lesquels il se sent à l'aise, vous avez désormais un aperçu de ma façon de travailler.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Environnement de développement rails sous Ubuntu 11.10]]></title>
    <link href="http://bobmaerten.github.com/environnement-de-developpment-rails-sous-ubuntu-11-dot-10"/>
    <updated>2011-11-08T22:09:00+01:00</updated>
    <id>http://bobmaerten.github.com/environnement-de-developpment-rails-sous-ubuntu-11-dot-10</id>
    <content type="html"><![CDATA[<p>Alors que nombre de tutoriels, vidéos, [pod|screen]casts traitent de la meilleure façon de configurer son environnement <em>MacOSX</em> pour le développement ruby/rails, les articles concernant ce qu'il en est des autres systèmes sont plutôt rares (et d'autant plus en français), aussi je vous propose ici ma façon de procéder sur Ubuntu 11.10 que je viens tout juste de finir d'installer et de paramétrer sur <a href="http://www.dell.com/fr/entreprise/p/vostro-3450/pd">mon portable</a>.</p>

<!--more-->


<h2>Méthode générale</h2>

<p>Comme il s'agit d'installer une configuration de développement, le principe réside en l'installation de ruby par l'intermédiaire de <a href="http://rvm.beginrescueend.com">RVM</a>. L'avantage est de pouvoir disposer des fonctionnalités offertes par RVM telles que le choix de la version de ruby en fonction du projet, et accessoirement la possibilité de gérer des <em>gemsets</em>.</p>

<h2>Pré-requis système</h2>

<p>Les paquets suivants doivent être installés afin de pouvoir compléter l'installation.
<code>bash
sudo apt-get install build-essential openssl libreadline6 libreadline6-dev \
zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 \
libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison \
git curl libssl0.9.8 libpq-dev
</code></p>

<h2>La commande magique ;-)</h2>

<p>RVM s'installe à l'aide de cette commande
<code>bash
bash &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer )
</code>
Cette commande récupère le script d'installation directement sur le site de RVM et l'exécute en local. Ensuite, comme l'indiquent les consignes affichées à la fin de l'exécution du script, il convient d'ajouter la commande suivante dans votre fichier <code>.bashrc</code> (ou .zshrc).
<code>bash
[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell
</code>
Il convient enfin de recharger votre environnement (en fermant votre terminal, ou en effectuant un <code>source .bashrc</code> (ou source .zshrc)</p>

<h2>Installation de Ruby</h2>

<p>Maintenant nous disposons de la commande rvm, nous pouvons nous attaquer à Ruby sereinement, car RVM va nous faciliter grandement la tâche. Pour installer la dernière version en date, il suffit de taper :
<code>bash
rvm install 1.9.3
</code>
S'en suit une longue phase de récupération des sources, de paramétrage et de compilation, qui au final nous amène à terminer la configuration par :
<code>bash
rvm use 1.9.3 # ajouter --default pour en faire la version chargée par défaut au lancement du terminal
</code></p>

<h2>Toute la puissance de ruby et de rubygems à votre portée</h2>

<p>Et voila, c'est tout. Vous pouvez désormais utiliser la commande <code>gem install</code> pour installer les librairies nécessaires à vos projets.
<code>bash
gem install bundler rails
rails new my_new_app
cd my_new_app
rails s
</code>
<strong>Note</strong> : cette dernière commande va échouer sur la derniere version de rails (3.1.x) car il y a une dépendance sur un moteur d'exécution Javascript. Deux solutions :
<code>bash ajouter therubyracer au fichier Gemfile
echo "gem 'therubyracer'" &gt;&gt; Gemfile
bundle
rails s
</code>
ou alors, si jamais vous vous intéressez également un peu à Javascript coté serveur, vous pouvez installer le paquet <code>nodejs</code>.
<code>bash Installer Node.js sur le système, rails s'en servira au lieu de therubyracer
sudo apt-get install nodejs
rails s
</code></p>

<h2>Conclusion</h2>

<p>Comme vous pouvez le constater sur le nombre de commandes à exécuter, l'installation et la configuration d'un environnement de développement rails sous Ubuntu n'est pas très compliqué. Et même si vous développez sous <em>MacOSX</em>, il peut être intéressant de connaître la démarche pour peu que vous soyez amené à déployer votre code sur un système Linux, ou si vous souhaitez tester votre application sur un serveur virtualisé (avec la gem <code>vagrant</code> par exemple).</p>

<h4>Ressources complémentaires</h4>

<ul>
<li><a href="https://github.com/joshfng/railsready">RailsReady</a> : un script encore plus automatisé qui fonctionne sur MacOS, Ubuntu et CentOS permettant d'effectuer toutes les manipulations effectuées ci-dessus en une ligne.</li>
<li><a href="https://github.com/sstephenson/rbenv">rbenv</a> est une nouvelle implémentation des fonctionnalités de RVM, avec un postulat légèrement différenti (notamment sur la façon de gérer l'environnement). Je l'évoque ici, mais ne l'ayant pas exploré vraiment, je ne me permettrais pas de porter un jugement.</li>
<li><a href="http://doc.ubuntu-fr.org/rubyonrails">La documentation Ubuntu officielle</a> en français, mais elle préconise une installation de RVM au niveau du système, ce qui oblige à préfixer chaque action d'installation de gem par <code>sudo</code>.</li>
</ul>


<h1>Mises à jour de cet article</h1>

<p>2011-11-12 : Ajout d'un prérequis (libpq-dev) requis par l'hébergement heroku
2011-11-09 : Ajout d'un prérequis (libssl) pour permettre à certaines application rails 3.0.x de se lancer</p>
]]></content>
  </entry>
  
</feed>
